@using ExoticHistoricSites.Shared.Models
@using LeafletForBlazor
@using ExoticHistoricSites.Client.Services
@inject HistoricSiteService SiteService

<div class="map-container">
    @if (_loading)
    {
        <div class="loading-overlay">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }

    <div class="real-time-map">
        <RealTimeMap @ref="_map"
                    OnAfterMapLoaded="OnMapLoaded">
            <StreamLegend />
        </RealTimeMap>
    </div>
</div>

@code {
    private RealTimeMap? _map;
    private bool _loading = true;
    private List<HistoricSite> _sites = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _sites = await SiteService.GetAllSitesAsync();
            Console.WriteLine($"Loaded {_sites.Count} sites");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading sites: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task OnMapLoaded(RealTimeMap.MapEventArgs args)
    {
        if (_map == null) return;

        var points = _sites.Select(site => new RealTimeMap.StreamPoint
        {
            guid = Guid.NewGuid(),
            latitude = site.Latitude,
            longitude = site.Longitude,
            type = "historic-site",
            value = new
            {
                site.Name,
                site.Description,
                site.Countries,
                Id = site.Id
            }
        }).ToList();

        await _map.Geometric.Points.upload(points);

        _map.Geometric.Points.Appearance().pattern = new RealTimeMap.PointSymbol
        {
            radius = 8,
            color = "#2c3e50",
            fillColor = "#3498db",
            weight = 2,
            opacity = 0.8,
            fillOpacity = 0.6
        };

        _map.Geometric.Points.AppearanceOnType(p => p.type == "historic-site").pattern =
            new RealTimeMap.PointTooltip
            {
                content = "<div class='site-tooltip'>" +
                         "<h3>${value.Name}</h3>" +
                         "<p>${value.Countries}</p>" +
                         "<button onclick=\"window.location.href='/site/${value.Id}'\" " +
                         "class='btn btn-primary btn-sm'>View Details</button>" +
                         "</div>",
                opacity = 0.9,
                permanent = false
            };
    }
}

<style>
    .map-container {
        position: relative;
        height: calc(100vh - 64px);
        width: 100%;
    }

    .real-time-map {
        height: 100%;
        width: 100%;
    }

    .loading-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 255, 255, 0.8);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1000;
    }

    .site-tooltip {
        padding: 10px;
        text-align: center;
    }

    .site-tooltip h3 {
        margin: 0 0 5px 0;
        font-size: 1.1rem;
    }

    .site-tooltip p {
        margin: 0 0 10px 0;
        font-size: 0.9rem;
    }

    .site-tooltip button {
        font-size: 0.8rem;
    }

    ::deep .leaflet-container {
        height: 100%;
        width: 100%;
    }
</style>